def make_line_parse(val):
    print(f'    rationals.push("{val}".parse().unwrap());')

def make_line_macro(val):
    print(f"    rationals.push(rational!({val}));")

print("// DO NOT ALTER! This module was generated by generate_code.py")
print("use rational::*;")
print("use rational_proc_macro::*;")
print()


def rust_func_wrapper(func):
    def res(func_name, *args, **kwargs):
        print()
        print(f"pub fn {func_name}() {{")
        print("    let mut rationals: Vec<Rational> = Vec::new();")
        print()
        func(*args, **kwargs)
        print("}")
    return res
    

@rust_func_wrapper
def make_ints(line_maker):
    for i in range(10):
        line_maker(i)
    for i in range(13, 100, 10):
        line_maker(i)
    for i in range(105, 1000, 93):
        line_maker(i)
    for i in range(1000, 1000000, 50000):
        line_maker(i)

@rust_func_wrapper
def make_floats(line_maker):
    for i in range(0, 100, 4):
        for j in ["01", "5", "724", "333333"]:
            line_maker(str(i) + "." + j)

@rust_func_wrapper
def make_thousandsth_floats(line_maker):
    for i in [3, 50234]:
        for j in range(3, 103):
            line_maker(f"{i}.{j:03}")

make_ints("using_parse_int", make_line_parse)
make_ints("using_macro_int", make_line_macro)

make_floats("using_parse_float", make_line_parse)
make_floats("using_macro_float", make_line_macro)

make_thousandsth_floats("using_parse_float_2", make_line_parse)
make_thousandsth_floats("using_macro_float_2", make_line_macro)
    